// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// üè¢ Multi-tenant & Auth
// ============================================

model Company {
  id         String     @id @default(uuid())
  name       String
  slug       String?    @unique
  isActive   Boolean    @default(true)
  users      User[]
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([isActive])
  @@map("companies")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(AGENT)
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId, role])
  @@index([email])
  @@map("users")
}

enum Role {
  ADMIN
  AGENT
  VIEWER
}

// ============================================
// üè° Properties & Units
// ============================================

model Property {
  id        String   @id @default(uuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name      String
  address   String?
  timezone  String   @default("UTC")
  isActive  Boolean  @default(true)
  units     Unit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId, isActive])
  @@map("properties")
}

model Unit {
  id           String          @id @default(uuid())
  propertyId   String
  property     Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  name         String
  maxOccupancy Int?
  isActive     Boolean         @default(true)
  inventory    InventoryDate[]
  reservations Reservation[]
  holds        Hold[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([propertyId, isActive])
  @@map("units")
}

// ============================================
// üìÖ Availability & Inventory
// ============================================

model InventoryDate {
  unitId String
  unit   Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  date   DateTime // UTC midnight del d√≠a local
  booked Boolean  @default(false)

  @@id([unitId, date])
  @@index([date])
  @@index([unitId, booked])
  @@map("inventory_dates")
}

// ============================================
// üîí Holds (Temporary Reservations)
// ============================================

model Hold {
  id           String        @id @default(uuid())
  unitId       String
  unit         Unit          @relation(fields: [unitId], references: [id], onDelete: Cascade)
  checkIn      DateTime
  checkOut     DateTime
  expiresAt    DateTime
  companyId    String
  payload      Json?
  reservations Reservation[]
  createdAt    DateTime      @default(now())

  @@index([unitId, expiresAt])
  @@index([expiresAt])
  @@index([companyId])
  @@map("holds")
}

// ============================================
// üìù Reservations
// ============================================

model Reservation {
  id          String            @id @default(uuid())
  companyId   String
  unitId      String
  unit        Unit              @relation(fields: [unitId], references: [id])
  guestName   String
  guestEmail  String
  checkIn     DateTime
  checkOut    DateTime
  status      ReservationStatus @default(PENDING)
  holdId      String?           @unique
  hold        Hold?             @relation(fields: [holdId], references: [id])
  totalAmount Decimal?          @db.Decimal(10, 2)
  currency    String?           @default("USD")
  canceledAt  DateTime?
  canceledBy  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([unitId, checkIn, checkOut])
  @@index([companyId, status])
  @@index([status, checkIn])
  @@index([guestEmail])
  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}
